
package servidor;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "PublicadorIControlador", targetNamespace = "http://servidor/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PublicadorIControlador {


    /**
     * 
     * @param fileName
     * @return
     *     returns byte[]
     * @throws IOException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/getFileRequest", output = "http://servidor/PublicadorIControlador/getFileResponse", fault = {
        @FaultAction(className = IOException_Exception.class, value = "http://servidor/PublicadorIControlador/getFile/Fault/IOException")
    })
    public byte[] getFile(
        @WebParam(name = "fileName", partName = "fileName")
        String fileName)
        throws IOException_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.DataDepartamento
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/dataDepartamentoNullRequest", output = "http://servidor/PublicadorIControlador/dataDepartamentoNullResponse")
    public DataDepartamento dataDepartamentoNull();

    /**
     * 
     * @return
     *     returns servidor.DataTurista
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/dataTuristaNullRequest", output = "http://servidor/PublicadorIControlador/dataTuristaNullResponse")
    public DataTurista dataTuristaNull();

    /**
     * 
     * @return
     *     returns servidor.DataProveedor
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/dataProveedorNullRequest", output = "http://servidor/PublicadorIControlador/dataProveedorNullResponse")
    public DataProveedor dataProveedorNull();

    /**
     * 
     * @return
     *     returns servidor.DataActividad
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/dataActividadNullRequest", output = "http://servidor/PublicadorIControlador/dataActividadNullResponse")
    public DataActividad dataActividadNull();

    /**
     * 
     * @return
     *     returns servidor.DataCompraGeneral
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/dataCGNullRequest", output = "http://servidor/PublicadorIControlador/dataCGNullResponse")
    public DataCompraGeneral dataCGNull();

    /**
     * 
     * @return
     *     returns servidor.DataCompraPaquete
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/dataCPNullRequest", output = "http://servidor/PublicadorIControlador/dataCPNullResponse")
    public DataCompraPaquete dataCPNull();

    /**
     * 
     * @return
     *     returns servidor.EstadoAct
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/estadoActNullRequest", output = "http://servidor/PublicadorIControlador/estadoActNullResponse")
    public EstadoAct estadoActNull();

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     * @throws UsuarioRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/confirmarAltaTuristaCompletoRequest", output = "http://servidor/PublicadorIControlador/confirmarAltaTuristaCompletoResponse", fault = {
        @FaultAction(className = UsuarioRepetidoException_Exception.class, value = "http://servidor/PublicadorIControlador/confirmarAltaTuristaCompleto/Fault/UsuarioRepetidoException")
    })
    public void confirmarAltaTuristaCompleto(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        XMLGregorianCalendar arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        byte[] arg7)
        throws UsuarioRepetidoException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     * @param arg9
     * @param arg8
     * @throws UsuarioRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/confirmarAltaProveedorCompletoRequest", output = "http://servidor/PublicadorIControlador/confirmarAltaProveedorCompletoResponse", fault = {
        @FaultAction(className = UsuarioRepetidoException_Exception.class, value = "http://servidor/PublicadorIControlador/confirmarAltaProveedorCompleto/Fault/UsuarioRepetidoException")
    })
    public void confirmarAltaProveedorCompleto(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        XMLGregorianCalendar arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        boolean arg7,
        @WebParam(name = "arg8", partName = "arg8")
        String arg8,
        @WebParam(name = "arg9", partName = "arg9")
        byte[] arg9)
        throws UsuarioRepetidoException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg10
     * @param arg11
     * @param arg7
     * @param arg6
     * @param arg9
     * @param arg8
     * @throws ActividadRepetidaException_Exception
     * @throws UsuarioNoExisteException_Exception
     * @throws ProveedorNoNacidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/registrarActividadImagenRequest", output = "http://servidor/PublicadorIControlador/registrarActividadImagenResponse", fault = {
        @FaultAction(className = ActividadRepetidaException_Exception.class, value = "http://servidor/PublicadorIControlador/registrarActividadImagen/Fault/ActividadRepetidaException"),
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/registrarActividadImagen/Fault/UsuarioNoExisteException"),
        @FaultAction(className = ProveedorNoNacidoException_Exception.class, value = "http://servidor/PublicadorIControlador/registrarActividadImagen/Fault/ProveedorNoNacidoException")
    })
    public void registrarActividadImagen(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        int arg3,
        @WebParam(name = "arg4", partName = "arg4")
        int arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        XMLGregorianCalendar arg6,
        @WebParam(name = "arg7", partName = "arg7")
        String arg7,
        @WebParam(name = "arg8", partName = "arg8")
        DataColeccionObject arg8,
        @WebParam(name = "arg9", partName = "arg9")
        String arg9,
        @WebParam(name = "arg10", partName = "arg10")
        boolean arg10,
        @WebParam(name = "arg11", partName = "arg11")
        byte[] arg11)
        throws ActividadRepetidaException_Exception, ProveedorNoNacidoException_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataUsuario
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/verInfoUsuarioRequest", output = "http://servidor/PublicadorIControlador/verInfoUsuarioResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/verInfoUsuario/Fault/UsuarioNoExisteException")
    })
    public DataUsuario verInfoUsuario(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws ActividadNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/sumarVistaAActRequest", output = "http://servidor/PublicadorIControlador/sumarVistaAActResponse", fault = {
        @FaultAction(className = ActividadNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/sumarVistaAAct/Fault/ActividadNoExisteException")
    })
    public void sumarVistaAAct(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ActividadNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws ActividadNoExisteException_Exception
     * @throws SalidasNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/sumarVistaASalRequest", output = "http://servidor/PublicadorIControlador/sumarVistaASalResponse", fault = {
        @FaultAction(className = SalidasNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/sumarVistaASal/Fault/SalidasNoExisteException"),
        @FaultAction(className = ActividadNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/sumarVistaASal/Fault/ActividadNoExisteException")
    })
    public void sumarVistaASal(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ActividadNoExisteException_Exception, SalidasNoExisteException_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.DataColeccionObject
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/getUsuariosCompRequest", output = "http://servidor/PublicadorIControlador/getUsuariosCompResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/getUsuariosComp/Fault/UsuarioNoExisteException")
    })
    public DataColeccionObject getUsuariosComp()
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     * @throws FechaAltaSalidaAnteriorActividad_Exception
     * @throws FechaAltaSalidaInvalida_Exception
     * @throws SalidaYaExisteExeption_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/confirmarAltaSalidaImagenRequest", output = "http://servidor/PublicadorIControlador/confirmarAltaSalidaImagenResponse", fault = {
        @FaultAction(className = SalidaYaExisteExeption_Exception.class, value = "http://servidor/PublicadorIControlador/confirmarAltaSalidaImagen/Fault/SalidaYaExisteExeption"),
        @FaultAction(className = FechaAltaSalidaInvalida_Exception.class, value = "http://servidor/PublicadorIControlador/confirmarAltaSalidaImagen/Fault/FechaAltaSalidaInvalida"),
        @FaultAction(className = FechaAltaSalidaAnteriorActividad_Exception.class, value = "http://servidor/PublicadorIControlador/confirmarAltaSalidaImagen/Fault/FechaAltaSalidaAnteriorActividad")
    })
    public void confirmarAltaSalidaImagen(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        XMLGregorianCalendar arg2,
        @WebParam(name = "arg3", partName = "arg3")
        XMLGregorianCalendar arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        int arg5,
        @WebParam(name = "arg6", partName = "arg6")
        XMLGregorianCalendar arg6,
        @WebParam(name = "arg7", partName = "arg7")
        byte[] arg7)
        throws FechaAltaSalidaAnteriorActividad_Exception, FechaAltaSalidaInvalida_Exception, SalidaYaExisteExeption_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/actualizarDatosTuristaCompletoRequest", output = "http://servidor/PublicadorIControlador/actualizarDatosTuristaCompletoResponse")
    public void actualizarDatosTuristaCompleto(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        XMLGregorianCalendar arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        byte[] arg7);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     * @param arg9
     * @param arg8
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/actualizarDatosProveedorCompletoRequest", output = "http://servidor/PublicadorIControlador/actualizarDatosProveedorCompletoResponse")
    public void actualizarDatosProveedorCompleto(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        XMLGregorianCalendar arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        boolean arg7,
        @WebParam(name = "arg8", partName = "arg8")
        String arg8,
        @WebParam(name = "arg9", partName = "arg9")
        byte[] arg9);

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataUsuario
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/ingresarDatosRequest", output = "http://servidor/PublicadorIControlador/ingresarDatosResponse")
    public DataUsuario ingresarDatos(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataColeccionObject
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/obtenerActividadCategoriaRequest", output = "http://servidor/PublicadorIControlador/obtenerActividadCategoriaResponse")
    public DataColeccionObject obtenerActividadCategoria(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataUsuario
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/obtenerDataUsuarioNickRequest", output = "http://servidor/PublicadorIControlador/obtenerDataUsuarioNickResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/obtenerDataUsuarioNick/Fault/UsuarioNoExisteException")
    })
    public DataUsuario obtenerDataUsuarioNick(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataUsuario
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/obtenerDataUsuarioMailRequest", output = "http://servidor/PublicadorIControlador/obtenerDataUsuarioMailResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/obtenerDataUsuarioMail/Fault/UsuarioNoExisteException")
    })
    public DataUsuario obtenerDataUsuarioMail(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataActividad
     * @throws ActividadNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/obtenerDataActividadRequest", output = "http://servidor/PublicadorIControlador/obtenerDataActividadResponse", fault = {
        @FaultAction(className = ActividadNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/obtenerDataActividad/Fault/ActividadNoExisteException")
    })
    public DataActividad obtenerDataActividad(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ActividadNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataSalida
     * @throws SalidasNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/obtenerDataSalidaRequest", output = "http://servidor/PublicadorIControlador/obtenerDataSalidaResponse", fault = {
        @FaultAction(className = SalidasNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/obtenerDataSalida/Fault/SalidasNoExisteException")
    })
    public DataSalida obtenerDataSalida(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws SalidasNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws PaqueteRepetidoException_Exception
     * @throws PaqueteNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/comprarPaqueteRequest", output = "http://servidor/PublicadorIControlador/comprarPaqueteResponse", fault = {
        @FaultAction(className = PaqueteNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/comprarPaquete/Fault/PaqueteNoExisteException"),
        @FaultAction(className = PaqueteRepetidoException_Exception.class, value = "http://servidor/PublicadorIControlador/comprarPaquete/Fault/PaqueteRepetidoException")
    })
    public void comprarPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        XMLGregorianCalendar arg1,
        @WebParam(name = "arg2", partName = "arg2")
        int arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3)
        throws PaqueteNoExisteException_Exception, PaqueteRepetidoException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @throws InscFechaInconsistente_Exception
     * @throws TuristaConSalida_Exception
     * @throws PaqueteRepetidoException_Exception
     * @throws ActividadNoExisteException_Exception
     * @throws TuristaNoHaNacido_Exception
     * @throws NoHayCuposException_Exception
     * @throws ExcedeTuristas_Exception
     * @throws InscFechaDespSalida_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/inscribirPaqRequest", output = "http://servidor/PublicadorIControlador/inscribirPaqResponse", fault = {
        @FaultAction(className = TuristaConSalida_Exception.class, value = "http://servidor/PublicadorIControlador/inscribirPaq/Fault/TuristaConSalida"),
        @FaultAction(className = ExcedeTuristas_Exception.class, value = "http://servidor/PublicadorIControlador/inscribirPaq/Fault/ExcedeTuristas"),
        @FaultAction(className = InscFechaInconsistente_Exception.class, value = "http://servidor/PublicadorIControlador/inscribirPaq/Fault/InscFechaInconsistente"),
        @FaultAction(className = ActividadNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/inscribirPaq/Fault/ActividadNoExisteException"),
        @FaultAction(className = InscFechaDespSalida_Exception.class, value = "http://servidor/PublicadorIControlador/inscribirPaq/Fault/InscFechaDespSalida"),
        @FaultAction(className = TuristaNoHaNacido_Exception.class, value = "http://servidor/PublicadorIControlador/inscribirPaq/Fault/TuristaNoHaNacido"),
        @FaultAction(className = PaqueteRepetidoException_Exception.class, value = "http://servidor/PublicadorIControlador/inscribirPaq/Fault/PaqueteRepetidoException"),
        @FaultAction(className = NoHayCuposException_Exception.class, value = "http://servidor/PublicadorIControlador/inscribirPaq/Fault/NoHayCuposException")
    })
    public void inscribirPaq(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        int arg2,
        @WebParam(name = "arg3", partName = "arg3")
        XMLGregorianCalendar arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5)
        throws ActividadNoExisteException_Exception, ExcedeTuristas_Exception, InscFechaDespSalida_Exception, InscFechaInconsistente_Exception, NoHayCuposException_Exception, PaqueteRepetidoException_Exception, TuristaConSalida_Exception, TuristaNoHaNacido_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataColeccionObject
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/obtenerPaquetesCompradosRequest", output = "http://servidor/PublicadorIControlador/obtenerPaquetesCompradosResponse")
    public DataColeccionObject obtenerPaquetesComprados(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws SalidasNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/obtenerNomActPorSalidaRequest", output = "http://servidor/PublicadorIControlador/obtenerNomActPorSalidaResponse", fault = {
        @FaultAction(className = SalidasNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/obtenerNomActPorSalida/Fault/SalidasNoExisteException")
    })
    public String obtenerNomActPorSalida(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws SalidasNoExisteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws UsuarioRepetidoException_Exception
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/seguirDejarDeSeguirUsuarioRequest", output = "http://servidor/PublicadorIControlador/seguirDejarDeSeguirUsuarioResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/seguirDejarDeSeguirUsuario/Fault/UsuarioNoExisteException"),
        @FaultAction(className = UsuarioRepetidoException_Exception.class, value = "http://servidor/PublicadorIControlador/seguirDejarDeSeguirUsuario/Fault/UsuarioRepetidoException")
    })
    public void seguirDejarDeSeguirUsuario(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        boolean arg2)
        throws UsuarioNoExisteException_Exception, UsuarioRepetidoException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ActividadRepetidaException_Exception
     * @throws UsuarioNoExisteException_Exception
     * @throws ActividadNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/agregarQuitarActividadFavoritaRequest", output = "http://servidor/PublicadorIControlador/agregarQuitarActividadFavoritaResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/agregarQuitarActividadFavorita/Fault/UsuarioNoExisteException"),
        @FaultAction(className = ActividadNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/agregarQuitarActividadFavorita/Fault/ActividadNoExisteException"),
        @FaultAction(className = ActividadRepetidaException_Exception.class, value = "http://servidor/PublicadorIControlador/agregarQuitarActividadFavorita/Fault/ActividadRepetidaException")
    })
    public void agregarQuitarActividadFavorita(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        boolean arg2)
        throws ActividadNoExisteException_Exception, ActividadRepetidaException_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws SalidasVigentesException_Exception
     * @throws ActividadNoExisteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/finalizarActividadRequest", output = "http://servidor/PublicadorIControlador/finalizarActividadResponse", fault = {
        @FaultAction(className = ActividadNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/finalizarActividad/Fault/ActividadNoExisteException"),
        @FaultAction(className = SalidasVigentesException_Exception.class, value = "http://servidor/PublicadorIControlador/finalizarActividad/Fault/SalidasVigentesException")
    })
    public void finalizarActividad(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ActividadNoExisteException_Exception, SalidasVigentesException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataColeccionObject
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/selecDepartamentoRequest", output = "http://servidor/PublicadorIControlador/selecDepartamentoResponse")
    public DataColeccionObject selecDepartamento(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataColeccionObject
     * @throws ActividadNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/salidasRequest", output = "http://servidor/PublicadorIControlador/salidasResponse", fault = {
        @FaultAction(className = ActividadNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/salidas/Fault/ActividadNoExisteException")
    })
    public DataColeccionObject salidas(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ActividadNoExisteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg4
     * @param arg1
     * @param arg0
     * @throws TuristaConSalida_Exception
     * @throws InscFechaInconsistente_Exception
     * @throws ActividadNoExisteException_Exception
     * @throws TuristaNoHaNacido_Exception
     * @throws ExcedeTuristas_Exception
     * @throws InscFechaDespSalida_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/inscribirRequest", output = "http://servidor/PublicadorIControlador/inscribirResponse", fault = {
        @FaultAction(className = TuristaConSalida_Exception.class, value = "http://servidor/PublicadorIControlador/inscribir/Fault/TuristaConSalida"),
        @FaultAction(className = ExcedeTuristas_Exception.class, value = "http://servidor/PublicadorIControlador/inscribir/Fault/ExcedeTuristas"),
        @FaultAction(className = InscFechaInconsistente_Exception.class, value = "http://servidor/PublicadorIControlador/inscribir/Fault/InscFechaInconsistente"),
        @FaultAction(className = ActividadNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/inscribir/Fault/ActividadNoExisteException"),
        @FaultAction(className = InscFechaDespSalida_Exception.class, value = "http://servidor/PublicadorIControlador/inscribir/Fault/InscFechaDespSalida"),
        @FaultAction(className = TuristaNoHaNacido_Exception.class, value = "http://servidor/PublicadorIControlador/inscribir/Fault/TuristaNoHaNacido")
    })
    public void inscribir(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        int arg2,
        @WebParam(name = "arg3", partName = "arg3")
        XMLGregorianCalendar arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4)
        throws ActividadNoExisteException_Exception, ExcedeTuristas_Exception, InscFechaDespSalida_Exception, InscFechaInconsistente_Exception, TuristaConSalida_Exception, TuristaNoHaNacido_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.DataColeccionObject
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/listarUsuariosRequest", output = "http://servidor/PublicadorIControlador/listarUsuariosResponse")
    public DataColeccionObject listarUsuarios();

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg10
     * @param arg7
     * @param arg6
     * @param arg9
     * @param arg8
     * @throws ActividadRepetidaException_Exception
     * @throws UsuarioNoExisteException_Exception
     * @throws ProveedorNoNacidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/registrarActividadRequest", output = "http://servidor/PublicadorIControlador/registrarActividadResponse", fault = {
        @FaultAction(className = ActividadRepetidaException_Exception.class, value = "http://servidor/PublicadorIControlador/registrarActividad/Fault/ActividadRepetidaException"),
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/registrarActividad/Fault/UsuarioNoExisteException"),
        @FaultAction(className = ProveedorNoNacidoException_Exception.class, value = "http://servidor/PublicadorIControlador/registrarActividad/Fault/ProveedorNoNacidoException")
    })
    public void registrarActividad(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        int arg3,
        @WebParam(name = "arg4", partName = "arg4")
        int arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        XMLGregorianCalendar arg6,
        @WebParam(name = "arg7", partName = "arg7")
        String arg7,
        @WebParam(name = "arg8", partName = "arg8")
        DataColeccionObject arg8,
        @WebParam(name = "arg9", partName = "arg9")
        String arg9,
        @WebParam(name = "arg10", partName = "arg10")
        boolean arg10)
        throws ActividadRepetidaException_Exception, ProveedorNoNacidoException_Exception, UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.DataColeccionObject
     * @throws UsuarioNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/getUsuariosRequest", output = "http://servidor/PublicadorIControlador/getUsuariosResponse", fault = {
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/getUsuarios/Fault/UsuarioNoExisteException")
    })
    public DataColeccionObject getUsuarios()
        throws UsuarioNoExisteException_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.DataColeccionObject
     * @throws NoExisteCategoriaException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/obtenerNombreCategoriasRequest", output = "http://servidor/PublicadorIControlador/obtenerNombreCategoriasResponse", fault = {
        @FaultAction(className = NoExisteCategoriaException_Exception.class, value = "http://servidor/PublicadorIControlador/obtenerNombreCategorias/Fault/NoExisteCategoriaException")
    })
    public DataColeccionObject obtenerNombreCategorias()
        throws NoExisteCategoriaException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg6
     * @throws FechaAltaSalidaAnteriorActividad_Exception
     * @throws FechaAltaSalidaInvalida_Exception
     * @throws SalidaYaExisteExeption_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/confirmarAltaSalidaRequest", output = "http://servidor/PublicadorIControlador/confirmarAltaSalidaResponse", fault = {
        @FaultAction(className = SalidaYaExisteExeption_Exception.class, value = "http://servidor/PublicadorIControlador/confirmarAltaSalida/Fault/SalidaYaExisteExeption"),
        @FaultAction(className = FechaAltaSalidaInvalida_Exception.class, value = "http://servidor/PublicadorIControlador/confirmarAltaSalida/Fault/FechaAltaSalidaInvalida"),
        @FaultAction(className = FechaAltaSalidaAnteriorActividad_Exception.class, value = "http://servidor/PublicadorIControlador/confirmarAltaSalida/Fault/FechaAltaSalidaAnteriorActividad")
    })
    public void confirmarAltaSalida(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        XMLGregorianCalendar arg2,
        @WebParam(name = "arg3", partName = "arg3")
        XMLGregorianCalendar arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4,
        @WebParam(name = "arg5", partName = "arg5")
        int arg5,
        @WebParam(name = "arg6", partName = "arg6")
        XMLGregorianCalendar arg6)
        throws FechaAltaSalidaAnteriorActividad_Exception, FechaAltaSalidaInvalida_Exception, SalidaYaExisteExeption_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg6
     * @throws UsuarioRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/confirmarAltaTuristaRequest", output = "http://servidor/PublicadorIControlador/confirmarAltaTuristaResponse", fault = {
        @FaultAction(className = UsuarioRepetidoException_Exception.class, value = "http://servidor/PublicadorIControlador/confirmarAltaTurista/Fault/UsuarioRepetidoException")
    })
    public void confirmarAltaTurista(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        XMLGregorianCalendar arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6)
        throws UsuarioRepetidoException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     * @param arg8
     * @throws UsuarioRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/confirmarAltaProveedorRequest", output = "http://servidor/PublicadorIControlador/confirmarAltaProveedorResponse", fault = {
        @FaultAction(className = UsuarioRepetidoException_Exception.class, value = "http://servidor/PublicadorIControlador/confirmarAltaProveedor/Fault/UsuarioRepetidoException")
    })
    public void confirmarAltaProveedor(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        XMLGregorianCalendar arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        boolean arg7,
        @WebParam(name = "arg8", partName = "arg8")
        String arg8)
        throws UsuarioRepetidoException_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.DataColeccionObject
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/listarPaquetesRequest", output = "http://servidor/PublicadorIControlador/listarPaquetesResponse")
    public DataColeccionObject listarPaquetes();

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataPaquete
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/obtenerDataPaqueteRequest", output = "http://servidor/PublicadorIControlador/obtenerDataPaqueteResponse")
    public DataPaquete obtenerDataPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/actualizarDatosTuristaRequest", output = "http://servidor/PublicadorIControlador/actualizarDatosTuristaResponse")
    public void actualizarDatosTurista(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        XMLGregorianCalendar arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5);

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg5
     * @param arg4
     * @param arg1
     * @param arg0
     * @param arg7
     * @param arg6
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/actualizarDatosProveedorRequest", output = "http://servidor/PublicadorIControlador/actualizarDatosProveedorResponse")
    public void actualizarDatosProveedor(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        XMLGregorianCalendar arg4,
        @WebParam(name = "arg5", partName = "arg5")
        String arg5,
        @WebParam(name = "arg6", partName = "arg6")
        String arg6,
        @WebParam(name = "arg7", partName = "arg7")
        boolean arg7);

    /**
     * 
     * @return
     *     returns servidor.DataColeccionObject
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/listarActividadesAgregadasRequest", output = "http://servidor/PublicadorIControlador/listarActividadesAgregadasResponse")
    public DataColeccionObject listarActividadesAgregadas();

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns servidor.DataColeccionObject
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/actividadesPorDepartamentoNoEnPaqueteRequest", output = "http://servidor/PublicadorIControlador/actividadesPorDepartamentoNoEnPaqueteResponse")
    public DataColeccionObject actividadesPorDepartamentoNoEnPaquete(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1);

    /**
     * 
     * @return
     *     returns servidor.DataColeccionObject
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/listarPaquetesNoCompradosRequest", output = "http://servidor/PublicadorIControlador/listarPaquetesNoCompradosResponse")
    public DataColeccionObject listarPaquetesNoComprados();

    /**
     * 
     * @throws PaqueteRepetidoException_Exception
     * @throws TuristaConSalida_Exception
     * @throws NoExisteCategoriaException_Exception
     * @throws ActividadRepetidaException_Exception
     * @throws DepartamentoNoExisteException_Exception
     * @throws SalidasVigentesException_Exception
     * @throws FechaAltaSalidaAnteriorActividad_Exception
     * @throws ActividadNoExisteException_Exception
     * @throws FechaAltaSalidaInvalida_Exception
     * @throws ExcedeTuristas_Exception
     * @throws InscFechaDespSalida_Exception
     * @throws InscFechaInconsistente_Exception
     * @throws EstadoActividadIncorrecto_Exception
     * @throws UsuarioRepetidoException_Exception
     * @throws UsuarioNoExisteException_Exception
     * @throws ProveedorNoNacidoException_Exception
     * @throws CategoriaYaExiste_Exception
     * @throws SalidasNoExisteException_Exception
     * @throws TuristaNoHaNacido_Exception
     * @throws NoHayCuposException_Exception
     * @throws PaqueteNoExisteException_Exception
     * @throws DepartamentoYaExisteExeption_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/PublicadorIControlador/excepcionesRequest", output = "http://servidor/PublicadorIControlador/excepcionesResponse", fault = {
        @FaultAction(className = ActividadNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/ActividadNoExisteException"),
        @FaultAction(className = ActividadRepetidaException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/ActividadRepetidaException"),
        @FaultAction(className = CategoriaYaExiste_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/CategoriaYaExiste"),
        @FaultAction(className = DepartamentoNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/DepartamentoNoExisteException"),
        @FaultAction(className = DepartamentoYaExisteExeption_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/DepartamentoYaExisteExeption"),
        @FaultAction(className = EstadoActividadIncorrecto_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/estadoActividadIncorrecto"),
        @FaultAction(className = ExcedeTuristas_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/ExcedeTuristas"),
        @FaultAction(className = FechaAltaSalidaAnteriorActividad_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/FechaAltaSalidaAnteriorActividad"),
        @FaultAction(className = FechaAltaSalidaInvalida_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/FechaAltaSalidaInvalida"),
        @FaultAction(className = InscFechaDespSalida_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/InscFechaDespSalida"),
        @FaultAction(className = InscFechaInconsistente_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/InscFechaInconsistente"),
        @FaultAction(className = NoExisteCategoriaException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/NoExisteCategoriaException"),
        @FaultAction(className = NoHayCuposException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/NoHayCuposException"),
        @FaultAction(className = PaqueteNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/PaqueteNoExisteException"),
        @FaultAction(className = PaqueteRepetidoException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/PaqueteRepetidoException"),
        @FaultAction(className = ProveedorNoNacidoException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/ProveedorNoNacidoException"),
        @FaultAction(className = SalidasNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/SalidasNoExisteException"),
        @FaultAction(className = SalidasVigentesException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/SalidasVigentesException"),
        @FaultAction(className = TuristaConSalida_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/TuristaConSalida"),
        @FaultAction(className = TuristaNoHaNacido_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/TuristaNoHaNacido"),
        @FaultAction(className = UsuarioNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/UsuarioNoExisteException"),
        @FaultAction(className = UsuarioRepetidoException_Exception.class, value = "http://servidor/PublicadorIControlador/excepciones/Fault/UsuarioRepetidoException")
    })
    public void excepciones()
        throws ActividadNoExisteException_Exception, ActividadRepetidaException_Exception, CategoriaYaExiste_Exception, DepartamentoNoExisteException_Exception, DepartamentoYaExisteExeption_Exception, EstadoActividadIncorrecto_Exception, ExcedeTuristas_Exception, FechaAltaSalidaAnteriorActividad_Exception, FechaAltaSalidaInvalida_Exception, InscFechaDespSalida_Exception, InscFechaInconsistente_Exception, NoExisteCategoriaException_Exception, NoHayCuposException_Exception, PaqueteNoExisteException_Exception, PaqueteRepetidoException_Exception, ProveedorNoNacidoException_Exception, SalidasNoExisteException_Exception, SalidasVigentesException_Exception, TuristaConSalida_Exception, TuristaNoHaNacido_Exception, UsuarioNoExisteException_Exception, UsuarioRepetidoException_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.DataColeccionObject
     * @throws DepartamentoNoExisteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/PublicadorIControlador/obtenerDataDepartamentosRequest", output = "http://servidor/PublicadorIControlador/obtenerDataDepartamentosResponse", fault = {
        @FaultAction(className = DepartamentoNoExisteException_Exception.class, value = "http://servidor/PublicadorIControlador/obtenerDataDepartamentos/Fault/DepartamentoNoExisteException")
    })
    public DataColeccionObject obtenerDataDepartamentos()
        throws DepartamentoNoExisteException_Exception
    ;

}
